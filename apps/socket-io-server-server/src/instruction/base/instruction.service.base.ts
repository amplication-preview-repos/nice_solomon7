/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Instruction as PrismaInstruction } from "@prisma/client";

export class InstructionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstructionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.instruction.count(args);
  }

  async instructions<T extends Prisma.InstructionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructionFindManyArgs>
  ): Promise<PrismaInstruction[]> {
    return this.prisma.instruction.findMany<Prisma.InstructionFindManyArgs>(
      args
    );
  }
  async instruction<T extends Prisma.InstructionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructionFindUniqueArgs>
  ): Promise<PrismaInstruction | null> {
    return this.prisma.instruction.findUnique(args);
  }
  async createInstruction<T extends Prisma.InstructionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructionCreateArgs>
  ): Promise<PrismaInstruction> {
    return this.prisma.instruction.create<T>(args);
  }
  async updateInstruction<T extends Prisma.InstructionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructionUpdateArgs>
  ): Promise<PrismaInstruction> {
    return this.prisma.instruction.update<T>(args);
  }
  async deleteInstruction<T extends Prisma.InstructionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructionDeleteArgs>
  ): Promise<PrismaInstruction> {
    return this.prisma.instruction.delete(args);
  }
}
