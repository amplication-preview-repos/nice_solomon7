/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InstructionService } from "../instruction.service";
import { InstructionCreateInput } from "./InstructionCreateInput";
import { Instruction } from "./Instruction";
import { InstructionFindManyArgs } from "./InstructionFindManyArgs";
import { InstructionWhereUniqueInput } from "./InstructionWhereUniqueInput";
import { InstructionUpdateInput } from "./InstructionUpdateInput";

export class InstructionControllerBase {
  constructor(protected readonly service: InstructionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Instruction })
  async createInstruction(
    @common.Body() data: InstructionCreateInput
  ): Promise<Instruction> {
    return await this.service.createInstruction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Instruction] })
  @ApiNestedQuery(InstructionFindManyArgs)
  async instructions(@common.Req() request: Request): Promise<Instruction[]> {
    const args = plainToClass(InstructionFindManyArgs, request.query);
    return this.service.instructions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Instruction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async instruction(
    @common.Param() params: InstructionWhereUniqueInput
  ): Promise<Instruction | null> {
    const result = await this.service.instruction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Instruction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInstruction(
    @common.Param() params: InstructionWhereUniqueInput,
    @common.Body() data: InstructionUpdateInput
  ): Promise<Instruction | null> {
    try {
      return await this.service.updateInstruction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Instruction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInstruction(
    @common.Param() params: InstructionWhereUniqueInput
  ): Promise<Instruction | null> {
    try {
      return await this.service.deleteInstruction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
